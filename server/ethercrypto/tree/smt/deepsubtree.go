package smt

import(
    "hash"
)

// DeepSparseMerkleSubTree is a deep Sparse Merkle subtree for working on only a few leafs.
type DeepSparseMerkleSubTree struct {
    *SparseMerkleTree
}

// NewDeepSparseMerkleSubTree creates a new deep Sparse Merkle subtree on an empty MapStore.
func NewDeepSparseMerkleSubTree(ms MapStore, hasher hash.Hash) *DeepSparseMerkleSubTree {
    smt := &SparseMerkleTree{
        hasher: hasher,
        ms: ms,
    }

    return &DeepSparseMerkleSubTree{SparseMerkleTree: smt}
}

// AddBranches adds new branches to the tree.
// These branches are generated by smt.ProveForRoot, and should be verified by VerifyProof first.
// Set updateRoot to true if the current root of the tree should be updated.
func (dsmst *DeepSparseMerkleSubTree) AddBranches(proof [][]byte, key []byte, value []byte, updateRoot bool) ([]byte, error) {
    newRoot, err := dsmst.updateWithSideNodes(dsmst.digest(key), value, proof)
    if err == nil && updateRoot {
        dsmst.SetRoot(newRoot)
    }
    return newRoot, err
}
